//
//     Copyright 2018 Couchbase, Inc
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

// FlatBuffer schema for objects to serialise the VB manifest

// Note from flatbuffers documentation these are the sizes of the types
//  * 8 bit: byte, ubyte, bool
//  * 16 bit: short, ushort
//  * 32 bit: int, uint, float
//  * 64 bit: long, ulong, double

namespace Collections.VB;

table SerialisedManifestEntry {
    // -1 allows a set of 0 to store data (and not be ignored by the default
    // mechanism) allowing for subsequent mutate_<start/end>Seqno to succeed.
    startSeqno:long = -1;
    endSeqno:long = -1;
    scopeId:uint;
    collectionId:uint;

    // The TTL is optional, ttlValid determines if the value of ttl should be
    // used when processing new items.
    ttlValid:bool;
    maxTtl:uint;
}

table SerialisedManifest {
    uid:ulong;

    // Each entry of the collection manifest map is added to this vector
    // The final entry of the vector is added/dropped collection which triggered
    // a serialisation of the manifest
    entries:[SerialisedManifestEntry];

    // This stores the name of the created collection, but only when a creation
    // triggered the serialisation of the manifest
    mutatedName:string;
}

root_type SerialisedManifest;
